#!/usr/local/bin/python

import sys
import os
from args_parser import parse_args
from connection import connect_and_download
from urlparse import urlparse
import OpenSSL


def validate_url(url, err):
    if url.scheme != 'https':
        # sys.exit("'%s' is not an https url" % url.geturl())
        err.append("'%s' is not an https url" % url.geturl())

def readPEM(filename, type, err):
    # 0 - crlfile
    # 1 - cert
    try:
        f = open(filename).read()

        if type == 0:
            crl_object = OpenSSL.crypto.load_crl(OpenSSL.crypto.FILETYPE_PEM, f)
            return crl_object.get_revoked()
        else:
            return OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, f)
    except:
        err.append("Unable to read file")

args = parse_args()

ciphers = ""
tls_version = OpenSSL.SSL.TLSv1_2_METHOD
cacert = OpenSSL.crypto.X509
pinnedcertificate = OpenSSL.crypto.X509
allow_stale_certs = 0
url = ""
err = []
# Note: To get all the serials of revoked objects, just call
# for rvk in revoked_objects:
#    print rvk.get_serial()
revoked_objects = []

if args["url"]:
    url = args["url"]
if args["ciphers"]:
    ciphers = args["ciphers"]
if args["tlsv1.0"]:
    tls_version = OpenSSL.SSL.TLSv1_METHOD
if args["tlsv1.1"]:
    tls_version = OpenSSL.SSL.TLSv1_1_METHOD
if args["tlsv1.2"]:
    tls_version = OpenSSL.SSL.TLSv1_2_METHOD
if args["sslv3"]:
    tls_version = OpenSSL.SSL.SSLv3_METHOD
if args["crlfile"]:
    revoked_objects = readPEM(args["crlfile"], 0, err)
if args["cacert"]:
    cacert = readPEM(args["cacert"], 1, err)
if args["allow_stale_certs"]:
    allow_stale_certs = args["allow_stale_certs"]
if args["pinnedcertificate"]:
    pinnedcertificate = readPEM(args["pinnedcertificate"], 1, err)

url = urlparse(url)
validate_url(url, err)
if len(err) > 0:
    sys.exit("There is an error")

# Construct a hash/dictionary-like settings for the function to consume
sec_settings = {}
sec_settings["tls_version"] = tls_version
sec_settings["revoked_objects"] = revoked_objects
sec_settings["cacert"] = cacert
sec_settings["allow_stale_certs"] = allow_stale_certs
sec_settings["pinnedcertificate"] = pinnedcertificate
connect_and_download(url, sec_settings)
